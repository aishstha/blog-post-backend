"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ymir_1 = require("@fimbul/ymir");
const TSLint = require("tslint");
const ts = require("typescript");
const getCaller = require("get-caller-file");
const path = require("path");
function wrapTslintRule(Rule, name = inferName(Rule)) {
    return _a = class extends ymir_1.AbstractRule {
            constructor(context) {
                super(context);
                this.delegate = new Rule({
                    ruleArguments: TSLint.Utils.arrayify(context.options),
                    ruleSeverity: 'error',
                    ruleName: name,
                    disabledIntervals: [],
                });
            }
            apply() {
                if (!this.delegate.isEnabled())
                    return;
                let result;
                if (this.program !== undefined && TSLint.isTypedRule(this.delegate)) {
                    result = this.delegate.applyWithProgram(this.sourceFile, this.program);
                }
                else {
                    result = this.delegate.apply(this.sourceFile);
                }
                const { fileName } = this.sourceFile;
                for (const failure of result) {
                    if (failure.getFileName() !== fileName)
                        throw new Error(`Adding failures for a different SourceFile is not supported. Expected '${fileName}' but received '${failure.getFileName()}' from rule '${this.delegate.getOptions().ruleName}'.`);
                    this.addFailure(failure.getStartPosition().getPosition(), failure.getEndPosition().getPosition(), failure.getFailure(), arrayify(failure.getFix()).map((r) => ({ start: r.start, end: r.end, text: r.text })));
                }
            }
        },
        _a.requiresTypeInformation = !!(Rule.metadata && Rule.metadata.requiresTypeInfo) ||
            Rule.prototype instanceof TSLint.Rules.TypedRule,
        _a.deprecated = Rule.metadata && typeof Rule.metadata.deprecationMessage === 'string'
            ? Rule.metadata.deprecationMessage || true
            : false,
        _a.supports = Rule.metadata && Rule.metadata.typescriptOnly
            ? ymir_1.isTypescriptFile
            : undefined,
        _a;
    var _a;
}
exports.wrapTslintRule = wrapTslintRule;
function inferName(Rule) {
    if (Rule.metadata !== undefined && Rule.metadata.ruleName)
        return Rule.metadata.ruleName;
    const caller = getCaller(3);
    return path.basename(caller, path.extname(caller));
}
function wrapTslintFormatter(Formatter) {
    return class extends ymir_1.AbstractFormatter {
        constructor() {
            super();
            this.failures = [];
            this.fixed = [];
            this.delegate = new Formatter();
        }
        format(fileName, summary) {
            let sourceFile;
            for (let i = 0; i < summary.fixes; ++i)
                this.fixed.push(new TSLint.RuleFailure(getSourceFile(), 0, 0, '', '', TSLint.Replacement.appendText(0, '')));
            if (summary.failures.length === 0)
                return;
            this.failures.push(...summary.failures.map((f) => {
                const failure = new TSLint.RuleFailure(getSourceFile(), f.start.position, f.end.position, f.message, f.ruleName, f.fix && f.fix.replacements.map((r) => new TSLint.Replacement(r.start, r.end - r.start, r.text)));
                failure.setRuleSeverity(f.severity);
                return failure;
            }));
            return;
            function getSourceFile() {
                return sourceFile ||
                    (sourceFile = ts.createSourceFile(fileName, summary.content, ts.ScriptTarget.Latest));
            }
        }
        flush() {
            return this.delegate.format(this.failures, this.fixed).trim();
        }
    };
}
exports.wrapTslintFormatter = wrapTslintFormatter;
function arrayify(maybeArr) {
    return Array.isArray(maybeArr)
        ? maybeArr
        : maybeArr === undefined
            ? []
            : [maybeArr];
}
//# sourceMappingURL=index.js.map